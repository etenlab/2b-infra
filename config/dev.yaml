# AWS env settings
awsAccountId: '808019037620'
awsRegion: 'us-east-2'

# Prefix used to identify app CloudFormation component
appPrefix: 'cb-dev'

# VPC configuration
vpcCidr: '10.0.0.0/16'
natGatewaysCount: 0

# Env domain setup
envSubdomain: 'dev'

# App ECS cluster name
ecsClusterName: 'dev-cluster'

# S3 bucket names
publicFilesBucketName: 'eil-public-files-dev'

# System Manager params to create
vpcSsmParam: '/dev/app-vpc-id'
defaultEcsExecRoleSsmParam: '/dev/ecs-default-execution-role'
defaultEcsTaskRoleSsmParam: '/dev/ecs-default-task-role'
albArnSsmParam: '/dev/alb-arn'
albSecurityGroupSsmParam: '/dev/alb-sg-id'
albListenerSsmParam: '/dev/alb-listener-arn'
dbSecurityGroupSsmParam: '/dev/db-sg-id'

# Secrets Manager params to create
dbCredentialSecret: 'dev/db/credentials'

# Whether database is accessible outside of VPC
dbPublicAccess: true

# DNS setup
dns:
  - existingRootHostedZone: 'dev.crowd.bible'
    rootDomainCertSsmParam: '/dev/dev.crowd.bible/root-domain-certificate'
  - existingRootHostedZone: 'dev.openlanguages.io'
    rootDomainCertSsmParam: '/dev/dev.openlanguages.io/root-domain-certificate'
  - existingRootHostedZone: 'dev.lab.eten.bible'
    rootDomainCertSsmParam: '/dev/dev.lab.eten.bible/root-domain-certificate'
  - existingRootHostedZone: 'dev.schema.bible'
    rootDomainCertSsmParam: '/dev/dev.schema.bible/root-domain-certificate'

fargateApiServices:
  DatabaseApiStack:
    projectTag: 'Common'
    albPort: 3001
    dockerPort: 8101
    priority: 10
    rootdomain: 'dev.crowd.bible'
    subdomain: 'db-api'
    serviceName: 'databaseApi'
    dockerImageUrl: 'etenlab/database-api'
    healthCheckPath: '/'
    environment:
      PORT: 8101
      RUN_MIGRATIONS: false
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      KEYCLOAK_URL: keycloak-url
      KEYCLOAK_REALM: keycloak-realm
      KEYCLOAK_CLIENTS: keycloak-clients
      CORS_ALLOW_ORIGINS: database-api-cors-allow-origins

  OLDBApiStack:
    projectTag: 'Resources'
    albPort: 3002
    dockerPort: 80
    priority: 20
    rootdomain: 'dev.openlanguages.io'
    subdomain: 'api'
    serviceName: 'oldbApi'
    dockerImageUrl: 'etenlab/oldb-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      KEYCLOAK_URL: keycloak-url
      KEYCLOAK_CLIENT_ID: keycloak-client-id
      KEYCLOAK_REALM: keycloak-realm
      KEYCLOAK_CLIENT_SECRET: keyloak-client-secret
      KEYCLOAK_ADMIN_CLIENT_ID: keycloak-admin-client-id
      KEYCLOAK_ADMIN_CLIENT_SECRET: keycloak-admin-client-secret
      AIRTABLE_BASE_ID: airtable-base-id
      AIRTABLE_API_KEY: airtable-api-key
      AIRTABLE_TABLE_ID: airtable-table-id
      AIRTABLE_TABLE_NAME: airtable-table-name
      AIRTABLE_TOTAL_RECORDS: airtable-total-recorts

  CPGServerStack:
    projectTag: 'Crowd'
    albPort: 3003
    dockerPort: 80
    priority: 30
    rootdomain: 'dev.crowd.bible'
    subdomain: 'api'
    serviceName: 'cpgServer'
    dockerImageUrl: 'etenlab/cpg-server'
    healthCheckPath: '/'
    environment:
      PORT: 80
      CORS_ALLOW_ORIGINS: ''
      MAX_FILE_SIZE: 1073741824 # 1024 * 1024 * 1024
      MAX_FILES: 10
      FRONTEND_URL: https://dev.crowd.bible
      FROM_EMAIL_ADDRESS: aslambabu@gmail.com
    # TODO: create a secret per app rather than one shared across all apps
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      AWS_S3_REGION: aws-s3-region
      AWS_S3_BUCKET_NAME: aws-s3-bucket-name
      AWS_S3_ACCESS_ID: aws-s3-access-id
      AWS_S3_SECRET_KEY: aws-s3-secret-key
      KEYCLOAK_URL: keycloak-url
      KEYCLOAK_REALM: keycloak-realm
      KEYCLOAK_CLIENT_ID: keycloak-client-id
      KEYCLOAK_CLIENT_SECRET: keyloak-client-secret-cpg
      JWT_KEY: jwt-key-cpg
      AWS_ACCESS_KEY_ID: aws-key-id-cpg
      AWS_SECRET_ACCESS_KEY: aws-secret-key-cpg

  # Requires creating a database manually and putting necessary secrets in ASM.
  # CREATE USER keycloak WITH ENCRYPTED PASSWORD 'KJHU9VrcK38GDGQu3BZHVNYqDqYkt22jP5Vkrd8q';
  # CREATE DATABASE keycloak_db;
  # GRANT ALL PRIVILEGES ON DATABASE keycloak_db TO keycloak;
  KeycloakStack:
    projectTag: 'Common'
    albPort: 3004
    dockerPort: 8080
    priority: 40
    rootdomain: 'dev.crowd.bible'
    subdomain: 'keycloak'
    serviceName: 'keycloak'
    dockerImageUrl: 'quay.io/keycloak/keycloak:latest'
    healthCheckPath: '/'
    cpu: 2048
    memory: 4096
    secrets:
      KC_DB_USERNAME: keycloak-username
      KC_DB_PASSWORD: keycloak-password
      KC_DB_URL_DATABASE: keycloak-dbname
      KC_DB_URL_HOST: keycloak-host
      KC_DB_SCHEMA: keycloak-schema
      KEYCLOAK_ADMIN: keycloak-admin-username
      KEYCLOAK_ADMIN_PASSWORD: keycloak-admin-password
    environment:
      KC_PROXY: edge
    command:
      - start-dev
      - --features
      - admin-fine-grained-authz

frontendServices:
  OldbAppStack:
    projectTag: 'Resources'
    appId: oldb-app
    domainName: dev.openlanguages.io
    enabled: true
    createCustomDomain: true
  CrowdBibleAppStack:
    projectTag: 'Crowd'
    appId: crowdbible
    domainName: dev.crowd.bible
    enabled: true
    createCustomDomain: true
  DocsStack:
    projectTag: 'Common'
    domainName: docs.dev.lab.eten.bible
    appId: docs-app
    enabled: true
    createCustomDomain: true
  StorybookStack:
    projectTag: 'Common'
    domainName: storybook.dev.lab.eten.bible
    appId: storybook-app
    enabled: true
    createCustomDomain: true
  SchemaStack:
    projectTag: 'Common'
    domainName: dev.schema.bible
    appId: schema-app
    enabled: true
    createCustomDomain: true
