# AWS env settings
awsAccountId: '808019037620'
awsRegion: 'us-east-2'

# Prefix used to identify app CloudFormation component
appPrefix: 'cb-dev'

# VPC configuration
vpcCidr: '10.0.0.0/16'
natGatewaysCount: 0

# Env domain setup
rootDomainName: 'dev.lab.eten.bible'
createEnvHostedZone: false # set to "true" if you want to create envDomainName, i.e."dev.dev.lab.eten.bible"
envDomainName: 'dev.lab.eten.bible' # must be present if createEnvHostedZone equals "true"
rootDomainCertArn: 'arn:aws:acm:us-east-2:808019037620:certificate/ea3ae498-f9e9-42df-a8aa-38541ee5ca44' # required if createEnvHostedZone is "false"

# App ECS cluster name
ecsClusterName: 'dev-cluster'

# System Manager params to create
vpcSsmParam: '/dev/app-vpc-id'
defaultEcsExecRoleSsmParam: '/dev/ecs-default-execution-role'
defaultEcsTaskRoleSsmParam: '/dev/ecs-default-task-role'
albArnSsmParam: '/dev/alb-arn'
albSecurityGroupSsmParam: '/dev/alb-sg-id'
albListenerSsmParam: '/dev/alb-listener-arn'
dbSecurityGroupSsmParam: '/dev/db-sg-id'
domainCertSsmParam: '/dev/root-domain-certificate'

# Secrets Manager params to create
dbCredentialSecret: 'dev/db/credentials'

# Whether database is accessible outside of VPC
dbPublicAccess: true

fargateApiServices:
  AdminApiStack:
    albPort: 3000
    dockerPort: 8101
    priority: 10
    subdomain: 'admin-api'
    serviceName: 'adminApi'
    dockerImageUrl: 'etenlab/admin-api'
    healthCheckPath: '/'
    environment:
      PORT: 8101
      RUN_MIGRATIONS: false
    secrets:
      DB_PASSWORD: password
      DB_USERNAME: username
      DB_HOST: host
      DB_NAME: dbname
      DB_PORT: port

  DatabaseApiStack:
    albPort: 3001
    dockerPort: 8101
    priority: 20
    subdomain: 'db-api'
    serviceName: 'databaseApi'
    dockerImageUrl: 'etenlab/database-api'
    healthCheckPath: '/'
    environment:
      PORT: 8101
      RUN_MIGRATIONS: false
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      KEYCLOAK_URL: keycloak-url
      KEYCLOAK_REALM: keycloak-realm
      KEYCLOAK_CLIENTS: keycloak-clients
      CORS_ALLOW_ORIGINS: database-api-cors-allow-origins

  ScriptureApiStack:
    albPort: 3002
    dockerPort: 80
    priority: 30
    subdomain: 'scripture-api'
    serviceName: 'scriptureApi'
    dockerImageUrl: 'etenlab/scripture-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  DiscussionApiStack:
    albPort: 3003
    dockerPort: 80
    priority: 40
    subdomain: 'discussion-api'
    serviceName: 'discussionApi'
    dockerImageUrl: 'etenlab/discussion-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  DiscussionSubscriptionApiStack:
    albPort: 3004
    dockerPort: 80
    priority: 50
    subdomain: 'discussion-sub-api'
    serviceName: 'discussionSubApi'
    dockerImageUrl: 'etenlab/discussion-subscriptions-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  NotificationsApiStack:
    albPort: 3005
    dockerPort: 80
    priority: 60
    subdomain: 'notifications-api'
    serviceName: 'notificationsApi'
    dockerImageUrl: 'etenlab/notifications-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  NotificationsSubscriptionApiStack:
    albPort: 3006
    dockerPort: 80
    priority: 70
    subdomain: 'notifications-sub-api'
    serviceName: 'notificationsSubApi'
    dockerImageUrl: 'etenlab/notifications-subscriptions-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  SiteTextApiStack:
    albPort: 3007
    dockerPort: 80
    priority: 80
    subdomain: 'site-text-api'
    serviceName: 'siteTextApi'
    dockerImageUrl: 'etenlab/site-text-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  FileApiStack:
    albPort: 3008
    dockerPort: 80
    priority: 90
    subdomain: 'file-api'
    serviceName: 'fileApi'
    dockerImageUrl: 'etenlab/file-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      AWS_S3_REGION: aws-s3-region
      AWS_S3_BUCKET_NAME: aws-s3-bucket-name
      AWS_S3_ACCESS_ID: aws-s3-access-id
      AWS_S3_SECRET_KEY: aws-s3-secret-key

  VotingApiStack:
    albPort: 3009
    dockerPort: 80
    priority: 100
    subdomain: 'voting-api'
    serviceName: 'votingApi'
    dockerImageUrl: 'etenlab/voting-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

  AggregationApiStack:
    albPort: 3010
    dockerPort: 80
    priority: 110
    subdomain: 'aggregation-api'
    serviceName: 'aggregationApi'
    dockerImageUrl: 'etenlab/aggregation-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
      SUBGRAPH_DISCUSSION_URL: https://discussion-api.dev.lab.eten.bible/graphql
      SUBGRAPH_NOTIFICATION_URL: https://notifications-api.dev.lab.eten.bible/graphql
      SUBGRAPH_SITE_TEXT_URL: https://site-text-api.dev.lab.eten.bible/graphql
      SUBGRAPH_VOTING_URL: https://voting-api.dev.lab.eten.bible/graphql
      SUBGRAPH_SCRIPTURE_URL: https://scripture-api.dev.lab.eten.bible/graphql
    secrets:

  DataLoadApiStack:
    albPort: 3011
    dockerPort: 80
    priority: 120
    subdomain: 'data-load-api'
    serviceName: 'dataLoadApi'
    dockerImageUrl: 'etenlab/data-load-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      BASIC_AUTH_CREDENTIALS: basic-auth-creds

  OLDBApiStack:
    albPort: 3013
    dockerPort: 80
    priority: 130
    subdomain: 'oldb-api'
    serviceName: 'oldbApi'
    dockerImageUrl: 'etenlab/oldb-api'
    healthCheckPath: '/'
    environment:
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname
      KEYCLOAK_URL: keycloak-url
      KEYCLOAK_CLIENT_ID: keycloak-client-id
      KEYCLOAK_REALM: keycloak-realm
      KEYCLOAK_CLIENT_SECRET: keyloak-client-secret
      KEYCLOAK_ADMIN_CLIENT_ID: keycloak-admin-client-id
      KEYCLOAK_ADMIN_CLIENT_SECRET: keycloak-admin-client-secret
      AIRTABLE_BASE_ID: airtable-base-id
      AIRTABLE_API_KEY: airtable-api-key
      AIRTABLE_TABLE_ID: airtable-table-id
      AIRTABLE_TABLE_NAME: airtable-table-name
      AIRTABLE_TOTAL_RECORDS: airtable-total-recorts

  GraphqlEngineStack:
    albPort: 3012
    dockerPort: 8080
    priority: 140
    subdomain: 'graphql-engine'
    serviceName: 'graphqlEngine'
    dockerImageUrl: 'hasura/graphql-engine:v2.13.2'
    healthCheckPath: '/console'
    secrets:
      PG_DATABASE_URL: pg-database-url
      HASURA_GRAPHQL_METADATA_DATABASE_URL: hasura-graphql-metadata-database-url
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_DEV_MODE: 'false'
      HASURA_GRAPHQL_ADMIN_SECRET: 'etenlabhasuraadminsecret'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: 'startup, http-log, webhook-log, websocket-log, query-log'

  # Requires creating a database manually and putting necessary secrets in ASM.
  # CREATE USER keycloak WITH ENCRYPTED PASSWORD 'KJHU9VrcK38GDGQu3BZHVNYqDqYkt22jP5Vkrd8q';
  # CREATE DATABASE keycloak_db;
  # GRANT ALL PRIVILEGES ON DATABASE keycloak_db TO keycloak;
  KeyCloakStack:
    albPort: 3014
    dockerPort: 8080
    priority: 150
    subdomain: 'keycloak'
    serviceName: 'keycloak'
    dockerImageUrl: 'quay.io/keycloak/keycloak:latest'
    healthCheckPath: '/'
    secrets:
      KC_DB_USERNAME: keycloak-username
      KC_DB_PASSWORD: keycloak-password
      KC_DB_URL_DATABASE: keycloak-dbname
      KC_DB_URL_HOST: keycloak-host
      KC_DB_SCHEMA: keycloak-schema
      KEYCLOAK_ADMIN: keycloak-admin-username
      KEYCLOAK_ADMIN_PASSWORD: keycloak-admin-password
    environment:
      # KC_DB: 'postgres'
      # KC_HOSTNAME_ADMIN_URL: https://keycloak.dev.lab.eten.bible
      KC_PROXY: edge
    command:
      - start-dev
      - --features
      - admin-fine-grained-authz

  GraphApiStack:
    albPort: 3015
    dockerPort: 80
    priority: 160
    subdomain: 'graph-api'
    serviceName: 'graphApi'
    dockerImageUrl: 'etenlab/graph-api'
    healthCheckPath: '/'
    environment:
      DB_SYNCHRONIZE: 'false'
      PORT: 80
    secrets:
      DB_HOST: host
      DB_PORT: port
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: dbname

frontendServices:
  # Showcase is already configured as showcase.*
  ShowcaseAppStack: # configured
    domainName: 'showcase.dev.lab.eten.bible'
  GraphAppStack:
    domainName: 'graph.dev.lab.eten.bible'
  TranslationAppStack:
    domainName: translation.dev.lab.eten.bible
  LocaliseAppStack:
    domainName: localise.dev.lab.eten.bible
  CrowdBibleAppStack:
    domainName: crowdbible.dev.lab.eten.bible
  OldbAppStack:
    domainName: oldb.dev.lab.eten.bible
  AdminAppStack:
    domainName: admin.dev.lab.eten.bible
  EcosystemAppStack:
    domainName: ecosystem.dev.lab.eten.bible
  # dev lab eten bible
  LandingAppStack:
    domainName: landing.dev.lab.eten.bible
  Storybook:
    domainName: storybook.dev.lab.eten.bible
  DocsStack:
    domainName: docs.dev.lab.eten.bible
